// SCRIPTS
const zero = '000000000000000000000000000000000000';
// Part 1 - 
function maskAdd(maskOperations) {
  let mem = {};
  let mask;

  // Values
  mask = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X';
  mem[8] = sendToMask(11, mask);
  mem[7] = sendToMask(101, mask);
  mem[8] = sendToMask(0, mask);
  // End Values
  return sumObj(mem);
}

function maskAddChallenge(maskOperations) {
  let mem = {};
  let mask;

  // Values
  mask = '01100101XX0010111010X010X10001010111';
  mem[59869] = sendToMask(296403277, mask);
  mem[50029] = sendToMask(14565, mask);
  mem[52488] = sendToMask(627950233, mask);
  mem[48318] = sendToMask(113982010, mask);
  mem[22257] = sendToMask(82, mask);
  mem[27870] = sendToMask(17795, mask);
  mem[55511] = sendToMask(4594118, mask);
  mask = '00000X00000110111110X000XX00010XX001';
  mem[61743] = sendToMask(13086, mask);
  mem[3724] = sendToMask(4029841, mask);
  mem[10560] = sendToMask(236422779, mask);
  mem[28511] = sendToMask(7957, mask);
  mem[32609] = sendToMask(3123, mask);
  mem[3930] = sendToMask(26884, mask);
  mask = '0110000XX1001011111X111010X010000100';
  mem[42884] = sendToMask(252696502, mask);
  mem[18565] = sendToMask(820, mask);
  mem[28279] = sendToMask(105604729, mask);
  mem[41611] = sendToMask(1567094, mask);
  mem[36341] = sendToMask(5551, mask);
  mem[35962] = sendToMask(28056, mask);
  mask = 'X111X001010010X1111X0XX1X11X10001X00';
  mem[52299] = sendToMask(24969, mask);
  mem[41449] = sendToMask(160272674, mask);
  mem[34903] = sendToMask(14302599, mask);
  mem[35962] = sendToMask(71766, mask);
  mask = 'X11001010XX010111010XX10100000X00101';
  mem[44250] = sendToMask(536, mask);
  mem[21842] = sendToMask(494315083, mask);
  mem[51716] = sendToMask(3417, mask);
  mem[37939] = sendToMask(242985, mask);
  mask = '111100X1010XX011X1111100X000000010X0';
  mem[35845] = sendToMask(48792746, mask);
  mem[26794] = sendToMask(1026647, mask);
  mem[47814] = sendToMask(92296, mask);
  mem[63043] = sendToMask(3100, mask);
  mem[26635] = sendToMask(2181, mask);
  mem[40164] = sendToMask(2436842, mask);
  mask = '0X1111X0X10110101011X100011X01010010';
  mem[63001] = sendToMask(36102371, mask);
  mem[47565] = sendToMask(2512786, mask);
  mask = '010X000111X1X01X1110XX01111100101X10';
  mem[18403] = sendToMask(512, mask);
  mem[58372] = sendToMask(65318068, mask);
  mem[53197] = sendToMask(15875, mask);
  mem[58632] = sendToMask(231362257, mask);
  mask = '0X1010X11110101X011000X0000000111001';
  mem[4095] = sendToMask(116134614, mask);
  mem[63365] = sendToMask(186252884, mask);
  mem[19024] = sendToMask(2449, mask);
  mem[30536] = sendToMask(1021, mask);
  mem[49282] = sendToMask(447504, mask);
  mem[16658] = sendToMask(98394885, mask);
  mask = '0111000111001011X11011000X1111X0100X';
  mem[64187] = sendToMask(1431, mask);
  mem[11141] = sendToMask(1904, mask);
  mem[39855] = sendToMask(61495, mask);
  mask = '1111000XX100X01X111111111110XX011X11';
  mem[44407] = sendToMask(1449308, mask);
  mem[43902] = sendToMask(2006, mask);
  mem[62547] = sendToMask(3478, mask);
  mask = '0X1010010100X011101000X00010X0100111';
  mem[3885] = sendToMask(140726549, mask);
  mem[3307] = sendToMask(938307640, mask);
  mem[22257] = sendToMask(71231, mask);
  mem[41243] = sendToMask(508095, mask);
  mem[25091] = sendToMask(24579, mask);
  mask = 'X0000000XX011011111010X000XX0X000X01';
  mem[22764] = sendToMask(96570583, mask);
  mem[36352] = sendToMask(56148675, mask);
  mask = '0X0X0011X110111010X001X10XX000101010';
  mem[38443] = sendToMask(1755, mask);
  mem[56360] = sendToMask(25308, mask);
  mask = '11X0X00000X11X11111001XXXXX100001111';
  mem[7833] = sendToMask(785, mask);
  mem[4380] = sendToMask(2874, mask);
  mask = '0X1000X11X0XX0X1101001011110001X0000';
  mem[61544] = sendToMask(144576256, mask);
  mem[2156] = sendToMask(1658, mask);
  mem[26571] = sendToMask(28977534, mask);
  mem[43902] = sendToMask(1032904266, mask);
  mem[21524] = sendToMask(463, mask);
  mask = '100X000010011011111XX01010001010X101';
  mem[47123] = sendToMask(5438, mask);
  mem[28936] = sendToMask(39885, mask);
  mem[55045] = sendToMask(946386, mask);
  mem[43630] = sendToMask(143495580, mask);
  mem[10560] = sendToMask(3231, mask);
  mask = '0110000X1X00101111XXX0000000010010X1';
  mem[39551] = sendToMask(524769, mask);
  mem[37150] = sendToMask(397326, mask);
  mem[153] = sendToMask(2696665, mask);
  mem[43255] = sendToMask(44, mask);
  mem[14355] = sendToMask(14827, mask);
  mem[51242] = sendToMask(445851, mask);
  mask = 'X1X000X1110X10111X101100100X0X000XX0';
  mem[40969] = sendToMask(756383545, mask);
  mem[26794] = sendToMask(100307329, mask);
  mem[48938] = sendToMask(1863389, mask);
  mem[2345] = sendToMask(2535119, mask);
  mem[53880] = sendToMask(1759799, mask);
  mask = '11X0X0001X0110111X001X0011XX000XX000';
  mem[8343] = sendToMask(11387, mask);
  mem[48589] = sendToMask(60, mask);
  mem[27590] = sendToMask(5929131, mask);
  mem[3690] = sendToMask(63744500, mask);
  mem[520] = sendToMask(31249543, mask);
  mem[24387] = sendToMask(473, mask);
  mem[21573] = sendToMask(32235112, mask);
  mask = '11101001011X10111X10X111X00000000000';
  mem[50565] = sendToMask(563, mask);
  mem[26571] = sendToMask(3496, mask);
  mem[3930] = sendToMask(418, mask);
  mem[35770] = sendToMask(7558838, mask);
  mem[12614] = sendToMask(1619627, mask);
  mask = '011X010111001X11111001100000X00XX1X1';
  mem[50701] = sendToMask(111977200, mask);
  mem[19006] = sendToMask(10909, mask);
  mem[16052] = sendToMask(74134, mask);
  mem[43094] = sendToMask(14253, mask);
  mem[50557] = sendToMask(608639, mask);
  mem[59406] = sendToMask(1422, mask);
  mask = '110X00001101101X11100XX011X000000011';
  mem[52383] = sendToMask(4751812, mask);
  mem[1669] = sendToMask(833448227, mask);
  mem[35841] = sendToMask(439768021, mask);
  mem[43630] = sendToMask(7511, mask);
  mem[53126] = sendToMask(343642, mask);
  mem[60802] = sendToMask(1256603, mask);
  mask = '11100XXX11XX101111101100000X00X01010';
  mem[49511] = sendToMask(4982217, mask);
  mem[51824] = sendToMask(270, mask);
  mem[51349] = sendToMask(1890, mask);
  mem[59808] = sendToMask(3773655, mask);
  mask = '111000XX110X10X11110011010110101101X';
  mem[57730] = sendToMask(57401, mask);
  mem[35630] = sendToMask(973239, mask);
  mem[54672] = sendToMask(138240715, mask);
  mem[8136] = sendToMask(10996, mask);
  mem[55459] = sendToMask(401980, mask);
  mem[17187] = sendToMask(941, mask);
  mask = 'X111XX01X100101111X00X0001000000X011';
  mem[41484] = sendToMask(1242838, mask);
  mem[29717] = sendToMask(1145160, mask);
  mem[27394] = sendToMask(1108224, mask);
  mem[2816] = sendToMask(272760856, mask);
  mask = '1XX00101000010111010X1111000X0010010';
  mem[32201] = sendToMask(304518, mask);
  mem[16394] = sendToMask(79826575, mask);
  mem[39941] = sendToMask(13157, mask);
  mem[35282] = sendToMask(760997, mask);
  mem[63951] = sendToMask(7011404, mask);
  mem[8985] = sendToMask(123284486, mask);
  mask = '011X100111000011X110X0110000X1111010';
  mem[34856] = sendToMask(39388801, mask);
  mem[18190] = sendToMask(3208452, mask);
  mask = '1X000X11XX1010111X10001111X00X101X00';
  mem[32295] = sendToMask(1729184, mask);
  mem[48809] = sendToMask(3708309, mask);
  mem[17960] = sendToMask(66227, mask);
  mem[39063] = sendToMask(5571972, mask);
  mem[34523] = sendToMask(1100265, mask);
  mem[17724] = sendToMask(1074235, mask);
  mask = '1X000000100110X111101X1001010000010X';
  mem[2309] = sendToMask(1178, mask);
  mem[56623] = sendToMask(5006, mask);
  mem[41091] = sendToMask(951374, mask);
  mem[63942] = sendToMask(21970475, mask);
  mem[8120] = sendToMask(1167, mask);
  mem[50184] = sendToMask(5634, mask);
  mask = '11X0001X111111X11010100XX0101X111000';
  mem[63703] = sendToMask(31429, mask);
  mem[19083] = sendToMask(32307, mask);
  mem[48832] = sendToMask(3825073, mask);
  mask = '11X000111111X11110X00000001000011X11';
  mem[53491] = sendToMask(953, mask);
  mem[39752] = sendToMask(91899271, mask);
  mask = '111XX011X1011011111XX110X00X00000000';
  mem[63089] = sendToMask(3036, mask);
  mem[38445] = sendToMask(356279, mask);
  mem[40137] = sendToMask(10955, mask);
  mem[37568] = sendToMask(477812, mask);
  mem[18443] = sendToMask(85, mask);
  mask = '11X1100101X0101111X000X001X111101XX1';
  mem[64998] = sendToMask(758355504, mask);
  mem[10506] = sendToMask(5946, mask);
  mem[58372] = sendToMask(800, mask);
  mem[40606] = sendToMask(1267021, mask);
  mem[42753] = sendToMask(86680, mask);
  mem[38503] = sendToMask(9164580, mask);
  mask = '1X110000XX100000X100010001110000X010';
  mem[4805] = sendToMask(898, mask);
  mem[50969] = sendToMask(219378, mask);
  mem[3182] = sendToMask(14757, mask);
  mask = '01101X0111X01011X0X000000111X0101001';
  mem[26794] = sendToMask(289, mask);
  mem[27899] = sendToMask(67683, mask);
  mask = 'X1X0001111XX1X1X10X0X0111110000010X0';
  mem[60968] = sendToMask(128881, mask);
  mem[21049] = sendToMask(153946, mask);
  mem[4625] = sendToMask(6492, mask);
  mem[13554] = sendToMask(14536684, mask);
  mask = '1110100X1X0110111X001011X1111X0X010X';
  mem[49387] = sendToMask(48190714, mask);
  mem[5514] = sendToMask(58395, mask);
  mem[59861] = sendToMask(2590, mask);
  mem[59717] = sendToMask(706, mask);
  mask = '110000XX1101X01111100001111000X00000';
  mem[52288] = sendToMask(594838, mask);
  mem[47711] = sendToMask(256545, mask);
  mem[37150] = sendToMask(5576185, mask);
  mask = 'X1001000100X101110X0X1001X01X1X00X0X';
  mem[12194] = sendToMask(1010012, mask);
  mem[55682] = sendToMask(745, mask);
  mem[19810] = sendToMask(54828, mask);
  mask = 'X111100111001011X10X0110110X00000011';
  mem[10747] = sendToMask(10766086, mask);
  mem[40969] = sendToMask(6443091, mask);
  mem[2563] = sendToMask(7520, mask);
  mask = 'X110X001X10010111X1001X0001010X00X11';
  mem[16385] = sendToMask(16194, mask);
  mem[9178] = sendToMask(1770, mask);
  mem[3885] = sendToMask(584370, mask);
  mem[32909] = sendToMask(551495, mask);
  mem[21842] = sendToMask(534, mask);
  mem[59406] = sendToMask(4042521, mask);
  mask = 'X110X0001100101X11100X00XXX0X00000X1';
  mem[62127] = sendToMask(1228052, mask);
  mem[34922] = sendToMask(165241779, mask);
  mem[38187] = sendToMask(7559, mask);
  mask = '00X101X111X0X1X1011010001X11111X0111';
  mem[37035] = sendToMask(51004, mask);
  mem[64187] = sendToMask(9284, mask);
  mem[38834] = sendToMask(163012800, mask);
  mask = '0X1X1001110010X111101X00101101001011';
  mem[41856] = sendToMask(13039831, mask);
  mem[63376] = sendToMask(1043992, mask);
  mask = '00X000000X01X01111X01X011001101X11X0';
  mem[14490] = sendToMask(10619, mask);
  mem[63497] = sendToMask(64, mask);
  mem[8985] = sendToMask(2445, mask);
  mem[3372] = sendToMask(2134806, mask);
  mem[43902] = sendToMask(25402, mask);
  mem[63408] = sendToMask(2150231, mask);
  mem[35251] = sendToMask(252, mask);
  mask = '01100001010X101X11X0XX0X000010000010';
  mem[11427] = sendToMask(40388, mask);
  mem[5594] = sendToMask(2064, mask);
  mem[14642] = sendToMask(3216356, mask);
  mem[33886] = sendToMask(16148, mask);
  mem[22872] = sendToMask(317877, mask);
  mem[16905] = sendToMask(22391, mask);
  mem[59260] = sendToMask(14964908, mask);
  mask = '11X01000X10X1011110010000101X1XXX1X0';
  mem[40205] = sendToMask(162183, mask);
  mem[52774] = sendToMask(21039251, mask);
  mem[47529] = sendToMask(13977, mask);
  mask = '111X1X0101X0101111100X1011X10X0001XX';
  mem[50214] = sendToMask(131677558, mask);
  mem[37828] = sendToMask(45776303, mask);
  mem[25486] = sendToMask(270926, mask);
  mem[3307] = sendToMask(100144082, mask);
  mask = '0X1X0101110011X1XX1010X010001X00X110';
  mem[24709] = sendToMask(4703889, mask);
  mem[20251] = sendToMask(4768780, mask);
  mem[23739] = sendToMask(292844, mask);
  mem[33886] = sendToMask(59676, mask);
  mem[29424] = sendToMask(157758852, mask);
  mem[48117] = sendToMask(434386871, mask);
  mask = '111010010100X01X1X10101111XX10000X00';
  mem[24094] = sendToMask(50839, mask);
  mem[40525] = sendToMask(62507, mask);
  mem[16058] = sendToMask(11731, mask);
  mem[57853] = sendToMask(286, mask);
  mem[13702] = sendToMask(252, mask);
  mem[61517] = sendToMask(92673, mask);
  mem[28899] = sendToMask(10302, mask);
  mask = '0X101000011X10X111001X10101001011010';
  mem[39054] = sendToMask(164757015, mask);
  mem[46804] = sendToMask(194909, mask);
  mem[17096] = sendToMask(16017, mask);
  mem[50214] = sendToMask(474, mask);
  mem[55787] = sendToMask(471712, mask);
  mask = '010X0X0X110110111X1X10000X000XX011X0';
  mem[50969] = sendToMask(44594, mask);
  mem[62079] = sendToMask(4008, mask);
  mem[26760] = sendToMask(1302, mask);
  mem[40242] = sendToMask(450994, mask);
  mask = '00100000000010X1010011X100X10X000111';
  mem[13951] = sendToMask(29184, mask);
  mem[44387] = sendToMask(733, mask);
  mem[56481] = sendToMask(1419987, mask);
  mem[21049] = sendToMask(113460142, mask);
  mask = '111000X01101101X10001X01110X01000001';
  mem[37955] = sendToMask(23023, mask);
  mem[23639] = sendToMask(7326, mask);
  mem[41939] = sendToMask(125079, mask);
  mask = '010X101X00X110XXX011010100X10011100X';
  mem[4000] = sendToMask(325975899, mask);
  mem[65121] = sendToMask(332644116, mask);
  mem[41463] = sendToMask(345, mask);
  mem[16748] = sendToMask(1087582, mask);
  mem[37842] = sendToMask(894, mask);
  mask = 'X110100111X01011X11011XX00X0101X0001';
  mem[19704] = sendToMask(11095, mask);
  mem[8715] = sendToMask(72847, mask);
  mem[41939] = sendToMask(6370749, mask);
  mem[12294] = sendToMask(6805400, mask);
  mem[21842] = sendToMask(79, mask);
  mask = '01XX1X10XX011X1X101X01010001X1010011';
  mem[50017] = sendToMask(55985, mask);
  mem[49915] = sendToMask(1470, mask);
  mem[38942] = sendToMask(1053875, mask);
  mem[16748] = sendToMask(874238254, mask);
  mem[59353] = sendToMask(678489, mask);
  mem[57733] = sendToMask(14739, mask);
  mask = '111111XX01X010X11110000001X11000111X';
  mem[40606] = sendToMask(199, mask);
  mem[17692] = sendToMask(1696176, mask);
  mem[11913] = sendToMask(4169294, mask);
  mask = '01101X0X01001011101XXX10001100001010';
  mem[23120] = sendToMask(237551058, mask);
  mem[28299] = sendToMask(142, mask);
  mask = '1X10X0011110101X1X1X11001100110X1001';
  mem[6118] = sendToMask(115871, mask);
  mem[19568] = sendToMask(514315, mask);
  mem[24764] = sendToMask(365, mask);
  mask = '1110X0X11X0XX0X1111X11011X0000000000';
  mem[47355] = sendToMask(25865880, mask);
  mem[51774] = sendToMask(163286264, mask);
  mem[37432] = sendToMask(2954, mask);
  mem[31036] = sendToMask(12067, mask);
  mask = '01110X01110010111XX001100001010X1101';
  mem[28516] = sendToMask(323191, mask);
  mem[43255] = sendToMask(3274, mask);
  mem[58073] = sendToMask(86929637, mask);
  mask = '01XX0001XX11001111X0X100X1010X101000';
  mem[18330] = sendToMask(378470, mask);
  mem[39651] = sendToMask(1052033, mask);
  mem[7784] = sendToMask(143118549, mask);
  mem[32641] = sendToMask(10950293, mask);
  mem[4029] = sendToMask(836004, mask);
  mask = '0110010X0100XX1X10101010101000X01110';
  mem[64998] = sendToMask(399249156, mask);
  mem[16391] = sendToMask(2391, mask);
  mem[15113] = sendToMask(25159, mask);
  mem[35039] = sendToMask(1672488, mask);
  mem[44901] = sendToMask(4947519, mask);
  mask = '001000X11101101X1X1000X0X00000111000';
  mem[23194] = sendToMask(192980783, mask);
  mem[2379] = sendToMask(26471, mask);
  mem[52040] = sendToMask(748413, mask);
  mask = 'XX101X11X1X01110X1100X0011X01110111X';
  mem[35610] = sendToMask(3487435, mask);
  mem[15827] = sendToMask(1447, mask);
  mem[52266] = sendToMask(8003180, mask);
  mem[6315] = sendToMask(254747938, mask);
  mem[38582] = sendToMask(21341903, mask);
  mem[23012] = sendToMask(1942, mask);
  mem[52040] = sendToMask(1040637609, mask);
  mask = '1110X011110XX0011111X001X000000111X0';
  mem[19431] = sendToMask(6438, mask);
  mem[55404] = sendToMask(381, mask);
  mem[49702] = sendToMask(21205234, mask);
  mem[28299] = sendToMask(43345, mask);
  mem[32419] = sendToMask(3944214, mask);
  mem[15970] = sendToMask(1406843, mask);
  mask = '0110X001XX010X01XX1X1010111001000000';
  mem[63608] = sendToMask(2388415, mask);
  mem[19550] = sendToMask(397, mask);
  mem[64770] = sendToMask(354, mask);
  mask = '011XX011X1101X10X11001X0X0001X101001';
  mem[27886] = sendToMask(54971772, mask);
  mem[61000] = sendToMask(547, mask);
  mem[9281] = sendToMask(5472661, mask);
  mem[32039] = sendToMask(20450, mask);
  mem[47529] = sendToMask(214406, mask);
  mem[32922] = sendToMask(2186075, mask);
  mask = 'X1X0000X0100101110X00100000010000101';
  mem[54996] = sendToMask(136156, mask);
  mem[1645] = sendToMask(1422, mask);
  mem[645] = sendToMask(51359613, mask);
  mask = '010X000110X100X1110000010011110010XX';
  mem[58473] = sendToMask(54000741, mask);
  mem[50214] = sendToMask(118839, mask);
  mem[60719] = sendToMask(4225, mask);
  mask = '11101000110010101X10X11011X00010X011';
  mem[4967] = sendToMask(2810, mask);
  mem[55561] = sendToMask(270767273, mask);
  mem[50906] = sendToMask(323094280, mask);
  mem[544] = sendToMask(1779102, mask);
  mem[12700] = sendToMask(122462, mask);
  mem[20654] = sendToMask(71, mask);
  mask = '01100001X0X1000101X011101X100000X00X';
  mem[40754] = sendToMask(6033263, mask);
  mem[3724] = sendToMask(640, mask);
  mem[6776] = sendToMask(274, mask);
  mask = '00110X0111001111X010110000X010X00110';
  mem[59461] = sendToMask(40987, mask);
  mem[49367] = sendToMask(418940480, mask);
  mem[12155] = sendToMask(58648, mask);
  mem[50876] = sendToMask(55597938, mask);
  mem[39338] = sendToMask(125566, mask);
  mask = '01100001X110101111X001101X1100X0100X';
  mem[16658] = sendToMask(13293, mask);
  mem[19410] = sendToMask(355061209, mask);
  mem[30127] = sendToMask(9284451, mask);
  mem[35805] = sendToMask(2422, mask);
  mask = '1X11X0010100X01X111X1101XX1101010011';
  mem[10560] = sendToMask(116, mask);
  mem[42153] = sendToMask(4817997, mask);
  mem[40333] = sendToMask(970832, mask);
  mem[19083] = sendToMask(63018397, mask);
  mask = '011XX0X111XX101111100XX0101010011010';
  mem[51898] = sendToMask(95230576, mask);
  mem[49059] = sendToMask(481728904, mask);
  mem[25416] = sendToMask(1192004, mask);
  mem[6045] = sendToMask(244681888, mask);
  mem[22225] = sendToMask(208962448, mask);
  mask = 'X11X100XX1X0101111XX1110101X110110X0';
  mem[10560] = sendToMask(3688, mask);
  mem[50016] = sendToMask(3038, mask);
  mem[25234] = sendToMask(52018301, mask);
  mask = 'X11XX001X100101111100110X011110X1XXX';
  mem[8343] = sendToMask(111304110, mask);
  mem[9100] = sendToMask(833307, mask);
  mem[43853] = sendToMask(836994, mask);
  mem[9178] = sendToMask(24458493, mask);
  mem[59596] = sendToMask(257520799, mask);
  mask = '101X0X0000100X0X010000X1X0010X0XX111';
  mem[13597] = sendToMask(887, mask);
  mem[16422] = sendToMask(232, mask);
  mem[52384] = sendToMask(120276377, mask);
  mem[10834] = sendToMask(6933, mask);
  mem[16058] = sendToMask(992102418, mask);
  mem[24456] = sendToMask(92155, mask);
  mask = 'X11000010100101111X01100001X10001XX1';
  mem[37568] = sendToMask(26930, mask);
  mem[16385] = sendToMask(232190606, mask);
  mem[8340] = sendToMask(113193119, mask);
  mem[35910] = sendToMask(832, mask);
  mask = '11111001010010111110100XX1X11X100111';
  mem[56429] = sendToMask(6105943, mask);
  mem[33886] = sendToMask(8020, mask);
  mem[51774] = sendToMask(168714, mask);
  mask = '1111100101101X11110000000X0110001X0X';
  mem[37828] = sendToMask(28012, mask);
  mem[51551] = sendToMask(320681847, mask);
  mem[34281] = sendToMask(52088, mask);
  mask = '0110X001110XX01111100010X00X010X1010';
  mem[36720] = sendToMask(26721, mask);
  mem[39098] = sendToMask(8365128, mask);
  mem[28279] = sendToMask(994775, mask);
  mem[59762] = sendToMask(1466626, mask);
  mem[17088] = sendToMask(910296, mask);
  mem[33578] = sendToMask(4789, mask);
  mem[31320] = sendToMask(11279, mask);
  mask = 'X1010000X1011011101001XX000X010011X1';
  mem[58476] = sendToMask(20790, mask);
  mem[33584] = sendToMask(339, mask);
  mem[21127] = sendToMask(471449302, mask);
  mask = '0100X01X1101X011X010010XX0000X011000';
  mem[39915] = sendToMask(1754512, mask);
  mem[51774] = sendToMask(183707725, mask);
  mem[43094] = sendToMask(2797257, mask);
  mem[21120] = sendToMask(8809, mask);
  mask = 'X010000X00XXX0X1X10010X11101X0100110';
  mem[48113] = sendToMask(54854990, mask);
  mem[43108] = sendToMask(127392, mask);
  mem[57733] = sendToMask(4840137, mask);
  mem[17088] = sendToMask(7272071, mask);
  mem[65436] = sendToMask(1211, mask);
  mask = 'X11010X01100101010100X11111000101X01';
  mem[38787] = sendToMask(139, mask);
  mem[9667] = sendToMask(37073154, mask);
  mem[18731] = sendToMask(370, mask);
  mem[4538] = sendToMask(15900, mask);
  mem[13202] = sendToMask(517905282, mask);
  mask = 'X11000011100001X1110X01001100X001010';
  mem[12467] = sendToMask(932, mask);
  mem[14070] = sendToMask(12280, mask);
  mem[40105] = sendToMask(184487874, mask);
  mem[33314] = sendToMask(832859, mask);
  mask = '0X100000X1001011X11X1000X10001X0X000';
  mem[17724] = sendToMask(3496777, mask);
  mem[53907] = sendToMask(23167, mask);
  mem[63544] = sendToMask(1614248, mask);
  mem[50209] = sendToMask(2618603, mask);
  mem[36348] = sendToMask(384412976, mask);
  mem[44536] = sendToMask(16223523, mask);
  mask = 'X110X1011X0011X11110X111X0X00001X000';
  mem[4784] = sendToMask(11971978, mask);
  mem[10982] = sendToMask(398035940, mask);
  mem[7005] = sendToMask(515, mask);
  mem[35241] = sendToMask(1093398, mask);
  mem[63779] = sendToMask(1906, mask);
  mask = '1100X00XX001101111X0X101X1010X001011';
  mem[36341] = sendToMask(2194817, mask);
  mem[40531] = sendToMask(724, mask);
  mem[5658] = sendToMask(468782968, mask);
  mem[62005] = sendToMask(1168, mask);
  mem[3491] = sendToMask(1329281, mask);
  mem[49511] = sendToMask(672, mask);
  mem[49173] = sendToMask(1048435, mask);
  mask = '1110XX0010X1101X11X01X1010011101010X';
  mem[44290] = sendToMask(660182, mask);
  mem[21184] = sendToMask(291220, mask);
  mem[39098] = sendToMask(2769543, mask);
  mem[30987] = sendToMask(24159, mask);
  mask = '1010X00X00100X1111000X011XX10100X110';
  mem[48117] = sendToMask(29838, mask);
  mem[23924] = sendToMask(4158, mask);
  mem[46502] = sendToMask(501874, mask);
  mem[32481] = sendToMask(713511, mask);
  mask = 'XX1000111XX1X01110X0X1001001X000100X';
  mem[11848] = sendToMask(60796, mask);
  mem[35576] = sendToMask(125075628, mask);
  mem[7365] = sendToMask(367051456, mask);
  mem[49453] = sendToMask(2467302, mask);
  mem[63274] = sendToMask(2446, mask);
  mask = 'X1100X01X10010111X10X10000X00000XXX1';
  mem[59406] = sendToMask(7522, mask);
  mem[26316] = sendToMask(194122, mask);
  mem[33419] = sendToMask(24756556, mask);
  mem[17066] = sendToMask(827, mask);
  mask = '111100010100001011111X101011X000X0X0';
  mem[28511] = sendToMask(54553, mask);
  mem[9469] = sendToMask(136199, mask);
  mem[6481] = sendToMask(674106955, mask);
  mem[4029] = sendToMask(62909806, mask);
  mask = '0010000000011X0X110X11X11XX100100011';
  mem[19006] = sendToMask(23636330, mask);
  mem[49695] = sendToMask(113355, mask);
  mem[9478] = sendToMask(25169678, mask);
  mem[26475] = sendToMask(7337, mask);
  mem[1712] = sendToMask(89775255, mask);
  mem[32101] = sendToMask(917, mask);
  mask = '1X00X00X1101101111X010X011100000XXX0';
  mem[24770] = sendToMask(10592648, mask);
  mem[40969] = sendToMask(757841, mask);
  mem[42211] = sendToMask(7319070, mask);
  mem[42753] = sendToMask(277734, mask);
  mem[30310] = sendToMask(11988774, mask);
  mem[19470] = sendToMask(89618256, mask);
  mem[2816] = sendToMask(89780492, mask);
  // End Values
  console.log(mem);
  return sumObj(mem);
}



// Part 2 - 

function busStagger(schedule) {

}

// Helper Functions
function sumObj(obj) {
  return Object.values(obj).reduce((a, b) => a + b);
}

function sendToMask(numMask, mask) {
  memToString = zero.substring(0, zero.length - numMask.toString(2).length) + numMask.toString(2);
  let retVal;
  eval('retVal = 0b' + bitMask(memToString, mask));

  return retVal;
}

function bitMask(num, mask) {
  let result = '';
  for (let i = 0; i < num.length; i++) {
    if (mask.charAt(i) === 'X') {
      result += num.charAt(i);
    }
    else {
      result += mask.charAt(i);
    }
  }
  return result;
}

// TEMPLATE
// Get output areas
const part1Test = document.getElementById("part1Test");
const part2Test = document.getElementById("part2Test");
const part1Challenge = document.getElementById("part1Challenge");
const part2Challenge = document.getElementById("part2Challenge");

// Test to confirm output
part1Test.textContent = maskAdd(testArray);
// part2Test.textContent = busStagger(testArray);

// Run challenge data and get output

part1Challenge.textContent = maskAddChallenge(challengeArray);
// part2Challenge.textContent = busStagger(challengeArray);